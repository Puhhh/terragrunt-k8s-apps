defaultRules:
  create: false

alertmanager:
  enabled: false

grafana:
  enabled: true
  defaultDashboardsEnabled: false
  adminPassword: ${admin_password}
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.kubernetes.local
    path: /
    tls:
      - hosts:
          - grafana.kubernetes.local
        secretName: grafana-tls
  persistence:
    enabled: true
    type: sts
    storageClassName: "local-path"
    accessModes:
      - ReadWriteOnce
    size: 3Gi
    finalizers:
      - kubernetes.io/pvc-protection
  sidecar:
    datasources:
      alertmanager:
        enabled: false
  extraConfigmapMounts:
    - name: kubernetes-local
      mountPath: /etc/grafana/ssl/
      configMap: kubernetes-local
      readOnly: true
#  assertNoLeakedSecrets: false
#  grafana.ini:
#    auth.generic_oauth:
#      enabled: true
#      name: Keycloak
#      allow_sign_up: true
#      client_id: grafana
#      client_secret: ${client_secret}
#      scopes: openid email profile offline_access roles groups
#      email_attribute_path: email
#      login_attribute_path: username
#      name_attribute_path: full_name
#      auth_url: https://keycloak.kubernetes.local/realms/kubernetes/protocol/openid-connect/auth
#      token_url: https://keycloak.kubernetes.local/realms/kubernetes/protocol/openid-connect/token
#      api_url: https://keycloak.kubernetes.local/realms/kubernetes/protocol/openid-connect/userinfo
#      role_attribute_path: contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
#      signout_redirect_url: https://keycloak.kubernetes.local/auth/realms/kubernetes/protocol/openid-connect/logout?post_logout_redirect_uri=https%3A%2F%2Fgrafana.kubernetes.local%2Flogin
#    server:
#      root_url: https://grafana.kubernetes.local/

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/auth-signin: https://oauth2-proxy.kubernetes.local/oauth2/start?rd=https://$host$request_uri
      nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth
      nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
      nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    hosts:
      - prometheus.kubernetes.local
    paths:
      - /
    tls:
      - hosts:
          - prometheus.kubernetes.local
        secretName: prometheus-tls

kubeApiServer:
  enabled: false

kubelet:
  enabled: false

kubeControllerManager:
  enabled: false

coreDns:
  enabled: false

kubeDns:
  enabled: false

kubeEtcd:
  enabled: false

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

kubeStateMetrics:
  enabled: false

nodeExporter:
  enabled: false
